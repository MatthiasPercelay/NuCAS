package com.uca.nucas.gui;

import com.uca.nucas.engine.Automaton;
import com.uca.nucas.engine.configuration.Configuration;
import javafx.scene.paint.Color;

import java.util.ArrayList;

/**
 * Singleton in charge of managing the model of the simulation
 * TODO : make it async because it currently blocks the UI thread
 * TODO : add support for the other configuration types
 */
public class Model {
    /**
     * Singleton instance
     */
    private static Model modelInstance = null;

    /**
     * holds the space time diagram generated by the simulation
     */
    private SpaceTimeDiagram spaceTimeDiagram = new SpaceTimeDiagram();

    /**
     * the automaton to use
     */
    private Automaton automaton;

    /**
     * the maximum number of steps for the simulation
     * may be removed at a later date if a convenient way to run a simulation
     * for a variable amount of steps is needed
     */
    private int maxSteps = 0;

    private boolean hasRun = false;

    private Model(){}

    /**
     * getter for the Model instance
     * @return
     */
    public static Model getModelInstance() {
        if (modelInstance == null) modelInstance = new Model();
        return modelInstance;
    }

    public boolean hasRun() {
        return hasRun;
    }

    /**
     * runs the automaton to the limit of maxSteps
     */
    public void runAutomaton() {
        Configuration conf = spaceTimeDiagram.get(0);
        for (int i = 0; i < maxSteps; i++) {
            conf = automaton.evaluate(conf);
            spaceTimeDiagram.append(conf);
        }
        hasRun = true;
    }

    public void setAutomaton(Automaton automaton) {
        this.automaton = automaton;
    }

    public SpaceTimeDiagram getSpaceTimeDiagram() {
        return spaceTimeDiagram;
    }

    public void resetToStart() {
        spaceTimeDiagram.clearComputations();
        hasRun = false;
    }

    public Color getStateColor(int state) {
        return automaton.getAlphabet().getColor(state);
    }

    public int getMaxSteps() {
        return maxSteps;
    }

    public void setMaxSteps(int maxSteps) {
        this.maxSteps = maxSteps;
    }

    public int getCurrentSteps() {
        return spaceTimeDiagram.getConfCount();
    }

    /**
     * obtain an array of Color objects corresponding to the i-th configuration in the space-time diagram
     * TODO : make it use the Alphabet properly instead of being limited to binary alphabets
     * @param i
     * @return
     */
    public Color[] getColors(int i) {
        Color[] res = new Color[spaceTimeDiagram.get(0).getInitialSize()];
        for (int j = 0; j < spaceTimeDiagram.get(0).getInitialSize(); j++) {
            if (spaceTimeDiagram.get(i).getCell(j) == 1) res[j] = Color.BLACK;
            else res[j] = Color.WHITE;
        }
        return res;
    }

}
